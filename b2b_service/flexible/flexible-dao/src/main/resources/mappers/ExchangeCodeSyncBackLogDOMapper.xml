<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bat.flexible.dao.exchange.ExchangeCodeSyncBackLogDOMapper" >
  <resultMap id="BaseResultMap" type="com.bat.flexible.dao.exchange.dataobject.ExchangeCodeSyncBackLogDO" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="item_id" property="itemId" jdbcType="INTEGER" />
    <result column="exchange_id" property="exchangeId" jdbcType="INTEGER" />
    <result column="exchange_code_id" property="exchangeCodeId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="already_sync_box_count" property="alreadySyncBoxCount" jdbcType="INTEGER" />
    <result column="already_sync_plain_code_count" property="alreadySyncPlainCodeCount" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, item_id, exchange_id, exchange_code_id, create_time, already_sync_box_count, 
    already_sync_plain_code_count
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from exchange_code_sync_back_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from exchange_code_sync_back_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bat.flexible.dao.exchange.dataobject.ExchangeCodeSyncBackLogDO" useGeneratedKeys="true" keyProperty="id">
    insert into exchange_code_sync_back_log (id, item_id, exchange_id,
      exchange_code_id, create_time, already_sync_box_count, 
      already_sync_plain_code_count)
    values (#{id,jdbcType=INTEGER}, #{itemId,jdbcType=INTEGER}, #{exchangeId,jdbcType=INTEGER}, 
      #{exchangeCodeId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{alreadySyncBoxCount,jdbcType=INTEGER}, 
      #{alreadySyncPlainCodeCount,jdbcType=INTEGER})
  </insert>
  <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id">
    insert into exchange_code_sync_back_log ( item_id, exchange_id,
    exchange_code_id, create_time, already_sync_box_count,
    already_sync_plain_code_count)
    values
    <foreach collection="exchangeCodeSyncBackLogDOList" separator=" , " item="log">
      ( #{log.itemId,jdbcType=INTEGER}, #{log.exchangeId,jdbcType=INTEGER},
      #{log.exchangeCodeId,jdbcType=INTEGER}, #{log.createTime,jdbcType=TIMESTAMP}, #{log.alreadySyncBoxCount,jdbcType=INTEGER},
      #{log.alreadySyncPlainCodeCount,jdbcType=INTEGER})
    </foreach>
  </insert>
  <insert id="insertSelective" parameterType="com.bat.flexible.dao.exchange.dataobject.ExchangeCodeSyncBackLogDO" useGeneratedKeys="true" keyProperty="id">
    insert into exchange_code_sync_back_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="itemId != null" >
        item_id,
      </if>
      <if test="exchangeId != null" >
        exchange_id,
      </if>
      <if test="exchangeCodeId != null" >
        exchange_code_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="alreadySyncBoxCount != null" >
        already_sync_box_count,
      </if>
      <if test="alreadySyncPlainCodeCount != null" >
        already_sync_plain_code_count,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="itemId != null" >
        #{itemId,jdbcType=INTEGER},
      </if>
      <if test="exchangeId != null" >
        #{exchangeId,jdbcType=INTEGER},
      </if>
      <if test="exchangeCodeId != null" >
        #{exchangeCodeId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="alreadySyncBoxCount != null" >
        #{alreadySyncBoxCount,jdbcType=INTEGER},
      </if>
      <if test="alreadySyncPlainCodeCount != null" >
        #{alreadySyncPlainCodeCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bat.flexible.dao.exchange.dataobject.ExchangeCodeSyncBackLogDO" >
    update exchange_code_sync_back_log
    <set >
      <if test="itemId != null" >
        item_id = #{itemId,jdbcType=INTEGER},
      </if>
      <if test="exchangeId != null" >
        exchange_id = #{exchangeId,jdbcType=INTEGER},
      </if>
      <if test="exchangeCodeId != null" >
        exchange_code_id = #{exchangeCodeId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="alreadySyncBoxCount != null" >
        already_sync_box_count = #{alreadySyncBoxCount,jdbcType=INTEGER},
      </if>
      <if test="alreadySyncPlainCodeCount != null" >
        already_sync_plain_code_count = #{alreadySyncPlainCodeCount,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bat.flexible.dao.exchange.dataobject.ExchangeCodeSyncBackLogDO" >
    update exchange_code_sync_back_log
    set item_id = #{itemId,jdbcType=INTEGER},
      exchange_id = #{exchangeId,jdbcType=INTEGER},
      exchange_code_id = #{exchangeCodeId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      already_sync_box_count = #{alreadySyncBoxCount,jdbcType=INTEGER},
      already_sync_plain_code_count = #{alreadySyncPlainCodeCount,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="findOneByBoxCodeAndStatus" resultMap="BaseResultMap">
    SELECT l.* FROM exchange_code_sync_back_log l INNER JOIN exchange_code c ON l.exchange_code_id  = c.id
             WHERE c.box_code=#{boxCode} AND c.`status`=#{status} limit 1
  </select>

  <select id="listUnUseBoxCodeNumBetween" resultMap="BaseResultMap">
    SELECT
      l.*
     FROM
     exchange_code_sync_back_log l
     INNER JOIN exchange_code c ON l.exchange_code_id = c.id
     WHERE
     l.item_id = :itemId
      AND c.`status` = 0
      AND l.already_sync_box_count &gt;= #{start}
      AND l.already_sync_box_count &lt;= #{end}
     GROUP BY
      c.box_code ORDER BY
     l.already_sync_box_count
  </select>

  <select id="findLastByItemId" resultMap="BaseResultMap">
    select * from exchange_code_sync_back_log where item_id =#{itemId} order by id desc limit 1
  </select>
</mapper>